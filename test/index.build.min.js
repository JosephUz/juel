(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const juel = require('./libs/juel');
const parser = require('./libs/parser');
const evaluator = require('./libs/evaluator');
const template = require('./libs/template');
const cache = require('./libs/cache');
const scope = require('./libs/scope');

var exports = {};

exports.template = template;
exports.cache = cache;
exports.get = cache.get;

exports.append = function (container, name, scope, common) {
    var jueled = null;

    if (container && typeof (container) == "string" && typeof (name) == "string") {
        container = document.querySelector(container);
    } else {
        throw new Error('missing arguments');
    }

    jueled = exports.create(name, scope, common);

    container.append(jueled.toHTML());

    return jueled;
}

exports.create = function (name, scope, common) {
    var parsered = null;
    var evaluated = null;
    var html = null;

    if (typeof (name) == "string" && typeof (scope) == "object" && (!common || typeof (common) == "object")) {
        html = template.get(name);
    } else {
        throw new Error('missing arguments');
    }

    if (!html) {
        throw new Error('empty html');
    }

    parsered = parser(html);

    if (parsered.scripts.length > 0) {
        evaluated = evaluator(parsered, scope, common);
    } else {
        evaluated = null;
    }

    return juel(parsered, evaluated);
}

exports.scope = function (object) {
    if (typeof (object) !== "object") {
        throw new Error('parameter must be an object');
    }
    return scope(object);
}

module.exports = exports;
},{"./libs/cache":2,"./libs/evaluator":4,"./libs/juel":5,"./libs/parser":9,"./libs/scope":12,"./libs/template":14}],2:[function(require,module,exports){
var exports = {};

var juels = {};

exports.set = function (item) {
    juels[item.id] = item;
}

exports.get = function (id) {
    return juels[id];
}

exports.delete = function (id) {
    delete juels[id];
}

exports.clear = function () {
    juels = {};
}

exports.list = function () {
    return Object.keys(juels).map(function (key) {
        return exports.get(key);
    });
}

module.exports = exports;
},{}],3:[function(require,module,exports){
const scopeLib = require('../scope');

function Evaluator(parsered, scope, common) {
    var _this = this;
    this.scope = scopeLib(scope);
    this.common = common;
    this.scripts = parsered.scripts;
    this.params = null;

    this.scope.onChange(function (key, value) {
        _this.refresh(key, value)
    });
}

Evaluator.prototype.refresh = function (key, value) {
    var _this = this;

    this.params = this.scope.keys.map(function (key) {
        return ' var ' + key + ' = scope.' + key + ';';
    }).join(' ');

    if (this.common) {
        this.params = this.params.concat(Object.keys(this.common).map(function (key) {
            return ' var ' + key + ' = common.' + key + ';';
        }).join(' '));
    }

    this.scripts.forEach(function (script) {
        if (!key || script.exist(key))
            script.refresh(_this);
    });

    return this;
}

module.exports = Evaluator;
},{"../scope":12}],4:[function(require,module,exports){
const Evaluator = require('./evaluator.js');

module.exports = function (parsered, scope, common) {
    return new Evaluator(parsered, scope, common).refresh();
};
},{"./evaluator.js":3}],5:[function(require,module,exports){
const Juel = require('./juel.js');

module.exports = function (parsered, evaluated) {
    return new Juel(parsered, evaluated);
}
},{"./juel.js":6}],6:[function(require,module,exports){
const cache = require('../cache');

function Juel(parsered, evaluated) {
    this.id = null;
    this.parsered = parsered;
    this.evaluated = evaluated;

    Object.defineProperties(this, {
        scope: {
            get: function () {
                return this.evaluated.scope;
            }
        }
    });
}

Juel.prototype.toHTML = function () {
    return this.parsered.toHTML();
}

Juel.prototype.setId = function (id) {
    this.id = id;
    cache.set(this);
    return this;
}

module.exports = Juel;
},{"../cache":2}],7:[function(require,module,exports){
const Juel = require('../juel/juel.js');
const Attribute = require('./attribute.js');

function AST(ast, parsered) {
    var _this = this;
    this.type = ast.type;
    this.content = ast.content;
    this.name = ast.name;
    this.script = ast.script;
    this.parent = ast.parent;
    this.oldHtml = null;
    this.children = [];
    this.attrs = [];

    Object.defineProperties(this, {
        html: {
            get: function () {
                return this._html;
            },
            set: function (value) {
                if (this.script) {
                    this.oldHtml = this._html || [];
                    this._html = Array.prototype.map.call(value.childNodes, function (item) {
                        return item;
                    })
                } else {
                    this._html = value;
                }
            }
        }
    });

    if (ast.script) {
        ast.script.onChange(function () {
            var items = _this.toHTML();
            var last = _this.oldHtml[0];
            if (!last) {
                _this.parent.children.forEach(function (sibling) {
                    if (!sibling.script && !last) {
                        last = sibling.html;
                    }
                    if (sibling == _this)
                        last = null;
                });
            }
            items.forEach(function (item) {
                if (last)
                    last.before(item);
                else
                    _this.parent.html.append(item);
            });
            _this.oldHtml.forEach(function (item) {
                item.remove();
            });
        });
    }

    if (ast.attrs) {
        this.attrs = Object.keys(ast.attrs).map(function (key) {
            var attr = new Attribute(key, ast.attrs[key], parsered);
            attr.parts.forEach(function (part) {
                if (part.script) {
                    part.script.onChange(function () {
                        if (_this.html)
                            _this.setAttribute(attr.key);
                    });
                }
            });
            return attr;
        });
    }

    (ast.children || []).forEach(function (child) {
        if (child.type == "text") {
            parsered.scripts.forEach(function (script) {
                var si = child.content.indexOf(script.original);
                if (si > -1) {
                    var content = child.content.substr(0, si);
                    if (content)
                        _this.children.push(new AST({
                            type: "text",
                            content: content
                        }, parsered));
                    _this.children.push(new AST({
                        type: "script",
                        script: script,
                        parent: _this
                    }, parsered));
                    child.content = child.content.substr(si + script.original.length);
                }
            });

            if (child.content) {
                _this.children.push(new AST({
                    type: "text",
                    content: child.content
                }, parsered));
            }
        } else {
            _this.children.push(new AST(child, parsered));
        }
    });
}

AST.prototype.render = function () {
    var node = null;
    if (this.type == "text") {
        node = document.createTextNode(this.content);
    } else if (this.type == "script") {
        var value = this.script.value;
        node = document.createElement('container');
        if (typeof (value) == "string") {
            node.append(document.createTextNode(value));
        } else if (typeof (value) == "object") {
            if (value instanceof Array) {
                value.forEach(function (item) {
                    if (item instanceof Juel)
                        node.append(item.toHTML());
                    else
                        node.append(item);
                });
            } else if (value instanceof Juel) {
                node.append(value.toHTML());
            } else {
                node.append(value);
            }
        } else {
            node.append(document.createTextNode(value));
        }
    } else {
        node = document.createElement(this.name);
    }
    return node;
}

AST.prototype.setAttribute = function (key) {
    var _this = this;
    this.attrs.forEach(function (attr) {
        if (key == null || attr.key == key) {
            attr.setEvent();
            if (attr.event.key) {
                if (attr.event.oldFn)
                    _this.html.removeEventListener(attr.event.key, attr.event.oldFn);
                if (attr.event.fn)
                    _this.html.addEventListener(attr.event.key, attr.event.fn);
            } else {
                _this.html.setAttribute(attr.key, attr.value());
            }
        }
    });
}

AST.prototype.toHTML = function () {
    var _this = this;
    this.html = this.render();
    this.setAttribute();
    this.children.forEach(function (child) {
        if (child.script) {
            child.toHTML().forEach(function (item) {
                _this.html.append(item);
            });
        } else {
            _this.html.append(child.toHTML());
        }
    });
    return this.html;
}

module.exports = AST;
},{"../juel/juel.js":6,"./attribute.js":8}],8:[function(require,module,exports){
function Attribute(key, value, parsered, script) {
    var _this = this;

    this.key = key;
    this._value = value;
    this.script = script;
    this.parsered = parsered;
    this.parts = [];
    this.event = {
        key: null,
        fn: null,
        oldFn: null
    };

    if (key) {
        parsered.scripts.forEach(function (script) {
            var scr = _this._value.indexOf(script.original);
            if (scr > -1) {
                var value = _this._value.substr(0, scr);
                if (value)
                    _this.parts.push(new Attribute(null, value));
                _this.parts.push(new Attribute(null, value, null, script));
                _this._value = _this._value.substr(scr + script.original.length);
            }
        });
    }
}

Attribute.prototype.value = function () {
    var value = "";
    if (this.parts.length) {
        this.parts.forEach(function (attr) {
            if (attr.script) {
                value += attr.script.value.toString();
            } else {
                value += attr._value;
            }
        });
        value += this._value;
    } else {
        value = this._value;
    }
    return value;
}

Attribute.prototype.setEvent = function () {
    if (this.parts.length == 1 &&
        typeof (this.parts[0].script.value) == "function") {
        this.event.key = this.key;
        this.event.oldFn = this.fn;
        this.event.fn = this.parts[0].script.value;
    } else {
        this.oldFn = this.fn;
        this.fn = null;
    }
}



module.exports = Attribute;
},{}],9:[function(require,module,exports){
const Parser = require('./parser.js');

module.exports = function (str) {
    return new Parser(str);
};
},{"./parser.js":10}],10:[function(require,module,exports){
const HTML = require('html-parse-stringify')
const Script = require('./script.js');
const AST = require('./ast.js');

function Parser(str) {
    this.text = str;
    this.scripts = (this.text.match(new RegExp("(?:{{)(.*?)(?:}})", "ig")) || [])
        .filter(function (item, index, self) { return self.indexOf(item) === index; })
        .map(function (item) { return new Script(item); });
    this.ast = new AST(HTML.parse(this.text)[0], this);
}

Parser.prototype.toHTML = function () {
    return this.ast.toHTML();
}

module.exports = Parser;
},{"./ast.js":7,"./script.js":11,"html-parse-stringify":15}],11:[function(require,module,exports){
function Script(original) {
    this.original = original;
    this.text = this.original.replace(new RegExp('({{)|(}})', "g"), '').replace(new RegExp('&gt;'), '>').replace(new RegExp('&lt;'), '>');
    this.value = null;
    this.first = false;
    this.events = {
        onChange: []
    };
}

Script.prototype.onChange = function (fn) {
    this.events.onChange.push(fn);
}

Script.prototype.exist = function (key) {
    return this.text.indexOf(key) > -1;
}

Script.prototype.refresh = function (evaluator) {
    var _this = this;

    var value = new Function('scope', 'common', 'original', 'script',
        evaluator.params + ' try { return eval(script); } catch(err) { console.log(err); return ""; }')
        (evaluator.scope, evaluator.common, this.original, this.text);

    if (value != this.value) {
        this.value = value;
        if (this.first)
            this.events.onChange.forEach(function (fn) {
                fn(_this);
            });
        else
            this.first = true;
    }
}

module.exports = Script;
},{}],12:[function(require,module,exports){
const Scope = require('./scope.js');

module.exports = function (object) {
    if (object instanceof Scope)
        return object;
    else
        return new Scope(object);
};
},{"./scope.js":13}],13:[function(require,module,exports){
function Scope(object) {
    var _this = this;
    this.keys = Object.keys(object);
    this.events = {
        onChange: []
    };

    this.keys.forEach(function (key) {
        var p = '_' + key;
        _this[p] = object[key];
        Object.defineProperty(_this, key, {
            get: function () {
                return _this[p];
            },
            set: function (value) {
                _this[p] = value;
                _this.events.onChange.forEach(function (fn) {
                    fn(key, value);
                });
            }
        });
    });

    this.keys.forEach(function (key) {
        Object.defineProperty(object, key, {
            get: function () {
                return _this[key];
            },
            set: function (value) {
                _this[key] = value;
            }
        });
    })
}

Scope.prototype.onChange = function (fn) {
    this.events.onChange.push(fn);
}

Scope.prototype.toJSON = function toJSON(object) {
    var json = {};
    if (object !== undefined) {
        if (object instanceof Scope) {
            json = object.toJSON();
        } if (object instanceof Array) {
            json = object.map(function (item) {
                return toJSON(item);
            });
        } else if (typeof (object) == "object") {
            Object.keys(object).forEach(function (key) {
                json[key] = toJSON(object[key]);
            });
            Object.getOwnPropertyNames(object).forEach(function (key) {
                json[key] = toJSON(object[key]);
            });
        } else {
            json = object;
        }
    } else if (this instanceof Scope) {
        var _this = this;
        this.keys.forEach(function (key) {
            json[key] = toJSON(_this['_' + key]);
        });
    }
    return json;
}

module.exports = Scope;
},{}],14:[function(require,module,exports){
var exports = {};

var templates = {};

exports.set = function (name, html) {
    if (typeof (name) == "object" && name instanceof Array) {
        name.forEach(function (item) {
            exports.set(item.name, item.html);
        });
    } else if (typeof (name) == "string" && typeof (html) == "string") {
        templates[name] = html;
    } else if (!name) {
        throw new Error('missing arguments');
    }
}

exports.read = function () {
    var nodes = document.querySelectorAll('[juel]');
    Array.prototype.forEach.call(nodes, function (node) {
        exports.set(node.getAttribute("juel"), node.innerHTML.trim());
        node.remove();
    });
}

exports.get = function (name) {
    return templates[name] || '';
}

module.exports = exports;
},{}],15:[function(require,module,exports){
module.exports = {
    parse: require('./lib/parse'),
    stringify: require('./lib/stringify')
};

},{"./lib/parse":17,"./lib/stringify":18}],16:[function(require,module,exports){
var attrRE = /([\w-]+)|['"]{1}([^'"]*)['"]{1}/g;

// create optimized lookup object for
// void elements as listed here: 
// http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
var lookup = (Object.create) ? Object.create(null) : {};
lookup.area = true;
lookup.base = true;
lookup.br = true;
lookup.col = true;
lookup.embed = true;
lookup.hr = true;
lookup.img = true;
lookup.input = true;
lookup.keygen = true;
lookup.link = true;
lookup.menuitem = true;
lookup.meta = true;
lookup.param = true;
lookup.source = true;
lookup.track = true;
lookup.wbr = true;

module.exports = function (tag) {
    var i = 0;
    var key;
    var res = {
        type: 'tag',
        name: '',
        voidElement: false,
        attrs: {},
        children: []
    };

    tag.replace(attrRE, function (match) {
        if (i % 2) {
            key = match;
        } else {
            if (i === 0) {
                if (lookup[match] || tag.charAt(tag.length - 2) === '/') {
                    res.voidElement = true;
                }
                res.name = match;
            } else {
                res.attrs[key] = match.replace(/['"]/g, '');
            }
        }
        i++;
    });

    return res;
};

},{}],17:[function(require,module,exports){
/*jshint -W030 */
var tagRE = /<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>/g;
var parseTag = require('./parse-tag');
// re-used obj for quick lookups of components
var empty = Object.create ? Object.create(null) : {};

module.exports = function parse(html, options) {
    options || (options = {});
    options.components || (options.components = empty);
    var result = [];
    var current;
    var level = -1;
    var arr = [];
    var byTag = {};
    var inComponent = false;

    html.replace(tagRE, function (tag, index) {
        if (inComponent) {
            if (tag !== ('</' + current.name + '>')) {
                return;
            } else {
                inComponent = false;
            }
        }
        var isOpen = tag.charAt(1) !== '/';
        var start = index + tag.length;
        var nextChar = html.charAt(start);
        var parent;

        if (isOpen) {
            level++;

            current = parseTag(tag);
            if (current.type === 'tag' && options.components[current.name]) {
                current.type = 'component';
                inComponent = true;
            }

            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {
                current.children.push({
                    type: 'text',
                    content: html.slice(start, html.indexOf('<', start))
                });
            }

            byTag[current.tagName] = current;

            // if we're at root, push new base node
            if (level === 0) {
                result.push(current);
            }

            parent = arr[level - 1];

            if (parent) {
                parent.children.push(current);
            }

            arr[level] = current;
        }

        if (!isOpen || current.voidElement) {
            level--;
            if (!inComponent && nextChar !== '<' && nextChar) {
                // trailing text node
                // if we're at the root, push a base text node. otherwise add as
                // a child to the current node.
                parent = level === -1 ? result : arr[level].children;

                // calculate correct end of the content slice in case there's
                // no tag after the text node.
                var end = html.indexOf('<', start);
                var content = html.slice(start, end === -1 ? undefined : end);
                // if a node is nothing but whitespace, no need to add it.
                if (!/^\s*$/.test(content)) {
                    parent.push({
                        type: 'text',
                        content: content
                    });
                }
            }
        }
    });

    return result;
};

},{"./parse-tag":16}],18:[function(require,module,exports){
function attrString(attrs) {
    var buff = [];
    for (var key in attrs) {
        buff.push(key + '="' + attrs[key] + '"');
    }
    if (!buff.length) {
        return '';
    }
    return ' ' + buff.join(' ');
}

function stringify(buff, doc) {
    switch (doc.type) {
    case 'text':
        return buff + doc.content;
    case 'tag':
        buff += '<' + doc.name + (doc.attrs ? attrString(doc.attrs) : '') + (doc.voidElement ? '/>' : '>');
        if (doc.voidElement) {
            return buff;
        }
        return buff + doc.children.reduce(stringify, '') + '</' + doc.name + '>';
    }
}

module.exports = function (doc) {
    return doc.reduce(function (token, rootEl) {
        return token + stringify('', rootEl);
    }, '');
};

},{}],19:[function(require,module,exports){
const juel = require("../index.js");
const Scope = require('../libs/scope/scope.js');

var scope = null;

mocha.setup('bdd');

describe("index.js test", function () {
    it("add templates to juel", function (done) {
        try {
            juel.template.read();

            juel.template.set('scopeShowBtn', '<button click="{{click}}">Show Scope On Console</button>');

            juel.template.set([
                { name: "changeListBtn", html: '<button id="changeListBtn" click="{{ click }}">Change List</button>' },
                { name: "countItem", html: '<li>{{ text }}{{ count ? " - " + count + " Time" + (count > 1 ? "s": "") + " Clicked" : "" }}</li>' },
                { name: "countList", html: '<ul>Clicked Counts {{ todoList.map(addItem) }} NOT: if not clicked, number doesnt show</ul>' }
            ]);

            if (juel.template.get('scopeShowBtn') == '<button click="{{click}}">Show Scope On Console</button>' && juel.template.get('todoList') == '<ul>Click Items {{ todoList.map(addItem) }}</ul>' && juel.template.get('changeListBtn') == '<button id="changeListBtn" click="{{ click }}">Change List</button>')
                done();
            else
                done(new Error('add templates to juel failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("create scope for global", function (done) {
        try {
            var todoList = [
                { id: 1, text: "Item1", count: 0 },
                { id: 2, text: "Item2", count: 0 },
                { id: 3, text: "Item3", count: 0 }
            ];

            scope = juel.scope({
                todoList: todoList
            });

            if (scope instanceof Scope && scope.todoList == todoList && scope.keys.length == 1)
                done();
            else
                done(new Error('create scope for global failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("append template to container and test click", function (done) {
        try {
            function changeList(e) {
                done();
            }

            juel.append("#changeList", 'changeListBtn', {}, {
                click: changeList
            });

            if (document.getElementById('changeList').innerHTML == '<button id="changeListBtn">Change List</button>') {
                document.getElementById('changeListBtn').dispatchEvent(new Event("click"));
            } else
                done(new Error('append template to container failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("append template and create sub template from script in parent template", function (done) {
        try {
            function itemClick(e) {

            }

            juel.append("#todoList", "todoList", scope, {
                addItem: function (todoItem) {
                    return juel.create("todoItem", todoItem, {
                        click: itemClick
                    }).toHTML();
                }
            });

            var output = '<ul>Click Items <li><button>Item1</button></li><li><button>Item2</button></li><li><button>Item3</button></li></ul>';

            if (document.getElementById('todoList').innerHTML == output)
                done();
            else
                done(new Error('append template and create sub template from script in parent template failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("test click for sub template and check scope", function (done) {
        try {
            function itemClick(e) {
                if (this == scope.todoList[0])
                    done();
                else
                    done(new Error('check scope failed.'));
            }

            document.getElementById('todoList').innerHTML = "";

            juel.append("#todoList", "todoList", scope, {
                addItem: function (todoItem) {
                    return juel.create("todoItem", todoItem, {
                        click: itemClick.bind(todoItem)
                    }).toHTML();
                }
            });

            document.querySelector('#todoList li button').dispatchEvent(new Event("click"));
        } catch (err) {
            done(err);
        }
    });

    it("set id for juel instance and check instance with cache", function (done) {
        try {
            function itemClick(e) {

            }

            document.getElementById('todoList').innerHTML = "";

            var instance = juel.append("#todoList", "todoList", scope, {
                addItem: function (todoItem) {
                    return juel.create("todoItem", todoItem, {
                        click: itemClick
                    }).toHTML();
                }
            }).setId("todoList");

            if (instance == juel.get('todoList'))
                done();
            else
                done(new Error('check instance with cache failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("change scope", function (done) {
        try {
            var todoList = [
                { id: 1, text: "Item1", count: 0 },
                { id: 2, text: "Item2", count: 0 },
                { id: 3, text: "Item3", count: 0 },
                { id: 4, text: "Item4", count: 0 },
                { id: 5, text: "Item5", count: 0 }
            ];

            function changeList(e) {
                scope.todoList = todoList;
            }

            function itemClick(e) {

            }

            document.getElementById('changeList').innerHTML = "";
            document.getElementById('todoList').innerHTML = "";

            juel.append("#changeList", 'changeListBtn', {}, {
                click: changeList
            });

            juel.append("#todoList", "todoList", scope, {
                addItem: function (todoItem) {
                    return juel.create("todoItem", todoItem, {
                        click: itemClick
                    }).toHTML();
                }
            });

            var output = '<ul>Click Items <li><button>Item1</button></li><li><button>Item2</button></li><li><button>Item3</button></li><li><button>Item4</button></li><li><button>Item5</button></li></ul>';

            document.getElementById('changeListBtn').dispatchEvent(new Event("click"));

            if (scope.todoList == todoList && document.getElementById('todoList').innerHTML == output)
                done();
            else
                done(new Error('change scope failed.'));
        } catch (err) {
            done(err);
        }
    });

    it("change sub template scope", function (done) {
        try {
            function itemClick(e) {
                this.count += 1;

                var output = '<ul>Clicked Counts <li>Item1 - 1 Time Clicked</li><li>Item2</li><li>Item3</li> NOT: if not clicked, number doesnt show</ul>';
                if (scope.todoList[0].count == 1 && document.getElementById('countList').innerHTML == output)
                    done();
                else
                    done(new Error('change sub template scope failed.'));
            }

            document.getElementById('todoList').innerHTML = "";

            scope = juel.scope({
                todoList: [
                    { id: 1, text: "Item1", count: 0 },
                    { id: 2, text: "Item2", count: 0 },
                    { id: 3, text: "Item3", count: 0 }
                ]
            });


            juel.append("#todoList", "todoList", scope, {
                addItem: function (todoItem) {
                    return juel.create("todoItem", todoItem, {
                        click: itemClick.bind(todoItem)
                    }).toHTML();
                }
            });

            juel.append("#countList", "countList", scope, {
                addItem: function (todoItem) {
                    return juel.create("countItem", todoItem).toHTML();
                }
            });

            document.querySelector('#todoList li button').dispatchEvent(new Event("click"));
        } catch (err) {
            done(err);
        }
    });

    it("check scope to JSON", function (done) {
        try {
            var output = '{"todoList":[{"id":1,"text":"Item1","count":1},{"id":2,"text":"Item2","count":0},{"id":3,"text":"Item3","count":0}]}';
            if (JSON.stringify(scope.toJSON()) == output)
                done();
            else
                done(new Error('check scope to JSON failed.'));
        } catch (err) {
            done(err);
        }
    });
});

mocha.checkLeaks();
mocha.run();
},{"../index.js":1,"../libs/scope/scope.js":13}]},{},[19]);
